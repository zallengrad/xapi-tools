// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// LACI LAMA ANDA - KITA MODIFIKASI SEDIKIT
model AnalysisResult {
  id          String   @id @default(uuid())
  sourceFile  String
  recordCount Int
  generatedAt DateTime
  payload     Json
  createdAt   DateTime @default(now())

  // --- INI BARIS YANG KITA TAMBAHKAN ---
  // Kita tambahkan "kolom" untuk menyimpan ID pemilik
  userId String
  // Kita buat "relasi" atau "kabel penghubung" ke laci User
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  // -------------------------------------
}

// ===================================================
// == LACI-LACI BARU UNTUK SISTEM KEAMANAN (NEXTAUTH) ==
// ===================================================

// Laci untuk menyimpan data inti pengguna (nama, email, dll)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?

  // --- INI BARIS YANG KITA TAMBAHKAN ---
  // Ini adalah "daftar" agar setiap pengguna bisa melihat
  // semua hasil analisis yang mereka miliki
  analysisResults AnalysisResult[]
  // -------------------------------------

  // Ini baris bawaan NextAuth untuk menghubungkan ke laci lain
  accounts Account[]
  sessions Session[]
}

// Laci untuk menyimpan info login (misal: "User A login via Google")
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Laci untuk mencatat sesi login yang sedang aktif (seperti "kartu akses" sementara)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Laci untuk token khusus (misal: saat reset password atau verifikasi email)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}